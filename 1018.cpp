//Ах как я люблю программировать на русском...
#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
#define максП1 100+1
using namespace std;
#define левый_индекс _
#define правый_индекс __
#define целое int
#define глав main
#define ввод cin
#define вывод cout
#define Дерево derevo
#define Д kkkk
#define решатель solver1
#define текущее cur
#define отец batya
#define ответ otb

#define вернуть return
#define если if
#define коли if
#define при if
#define иначе else
#define коли_нет else
#define пока while
#define прервать break
#define продолжить continue
#define ы //

целое N;
целое Q;
целое Дерево[максП1][максП1];
целое Д[максП1][максП1];

целое решатель (целое текущее, целое отец, целое q)
{
    коли (q <= 0)
    {
        вернуть 0;
    }
    целое левый_индекс = -1, правый_индекс = -1;
    целое &ответ = Д[текущее][q];
    коли (ответ != -1)
    {
        вернуть ответ;
    }
    целое i = 0;
    пока (i < максП1)
    {
        коли (Дерево[текущее][i] != -1 && i != отец)
        {
            левый_индекс = i;
            прервать;
        }
        i+=1;
    }
    i = (левый_индекс == -1?0:левый_индекс+1);
    пока(i < максП1)
    {
        коли (Дерево[текущее][i] != -1 && i != отец)
        {
            правый_индекс = i;
            прервать;
        }
        i+=1;
    }

    коли (левый_индекс == -1 || правый_индекс == -1)
    {
        вернуть 0;
    }
    i = 0;
    пока (i<=q)
    {
        ответ = max (ответ, (i == q?0:Дерево[текущее][левый_индекс] +
        решатель(левый_индекс, текущее, q - i - 1))
        + (i == 0?0:Дерево[текущее][правый_индекс] +
        решатель(правый_индекс, текущее, i - 1)));
        i+=1;
    }


    вернуть ответ;
}
целое глав()
{
    целое a,b,c;
    cin >> N >> Q;
    memset (Дерево, -1, sizeof Дерево); //заполняю -1 всю память массивов
    memset (Д, -1, sizeof Д);
    целое i = 0;
    пока(i<N)
    {
        cin >> a >> b >> c;
        Дерево [a][b] = c;
        Дерево [b][a] = c;
        i+=1;
    }

    cout << решатель (1, 0, Q)<<"\n";
    вернуть 0;
}
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ /*⣀⣀⣀⣀⣀⣠⣠⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⢐⣤⣴⣾⣿⣿⣿⣶⣿⣻⣛⣿⣷⢴⣄⠀⠀⠀⠀⠀⠀⠀⠀⠈⠩⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣷⣵⣿⢿⣿⣴⡴⢤⡀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⢹⡏⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣿⣿⣿⣿⣿⣿⠿⠟⠋⠙⠛⠛⠋⠛⠛⠋⠉⠉⠉⠻⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠘⠃⣿⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⡾⠋⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠙⢩⣿⣿⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⡇⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠞⠋⠀⠀⠀⠀⠀⠉⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣾⠀⠀⠀⠀⠀⠉⣉⠀⠀⠀⠀⠀⠀⣰⠻⠿⠲⠧⠄⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠸⣶⡇⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠐⠴⠛⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠄⣿⡧⣿⣿⣿⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠅⠀⠀⠀⠀⠀⠀⠀⠀⠀⣛⠀⣿⣿⣿⣿
// ⠀⠀⠀⠀⣼⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⡤⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢛⠀⣿⣿⣿⣿
// ⠀⠀⠀⣼⡟⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠉⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣧⣿⣿⣿⣿
// ⠀⠀⢰⣿⡇⠀⠀⠀⡀⠀⢰⣿⣀⠀⠀⠀⠀⠀⠀⠀⡀⠠⠤⠤⠀⠒⠒⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣿⣿⣿⣿⣿⣿
// ⢠⣤⣿⣿⡇⠀⡄⠀⣿⣖⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠤⠖⠒⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿
// ⣼⣿⣿⣇⣦⣼⠃⢠⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣾⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⢀⡾⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢠⣴⡎⠈⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠻⠻⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⠿⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠻⠿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⡿⠠⣿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙
// ⢋⣼⣿⣿⣿⡟⠘⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣾⢿⠟⠋*/⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
