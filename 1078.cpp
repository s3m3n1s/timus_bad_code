
#include <iostream>
#include <algorithm>//для сорта
#include <vector>

using namespace std;
#define отрезок _

#define вектор vector
#define вeктор vecvecvec
#define максимальная_глубина maxglub
#define большой big_vector
#define отец batya
#define глубина glubina
#define класс class
#define публичное public
#define целое int
#define один 1
#define ноль 0
#define максимум max
#define ввод cin
#define вывод cout
#define глав main
#define начало begin()
#define конец end()
#define вернуть return
#define решатель solver
#define пока while
#define постоянная const
#define если if
#define коли if
#define при if
#define иначе else
#define коли_нет else
#define добавить_в_конец_вектора vecvecvec.push_back
#define выводящая_штука ____
#define сортировать sort
класс отрезок
{
    публичное:
        целое x1;
        целое x2;
        целое n;
        целое глубина;
        отрезок* отец;
        отрезок(целое x1, целое x2, целое n, отрезок* отец):
        x1(x1), x2(x2), n(n),
        отец(отец), глубина(один)
        { }
};

целое глав()
{
    целое N, x1, x2;
    вектор<отрезок> вeктор;
    целое n = один;
    ввод >> N;
    пока(n<=N)
    {
        ввод >> x1 >> x2;
        добавить_в_конец_вектора(отрезок(x1, x2, n, ноль));
        n+=один;
    }

    сортировать(вeктор.начало, вeктор.конец,
              []
              (постоянная отрезок& a, постоянная отрезок& b)
    { вернуть a.x2-a.x1 > b.x2-b.x1; });
    целое максимум = один;
    отрезок* большой = &вeктор[ноль];

    целое i = ноль;
    пока(i < N)
    {
        целое максимальная_глубина = ноль;
        целое j = ноль;
        пока(j<N)
        {
            если(вeктор[j].x1 < вeктор[i].x1 && вeктор[i].x2 < вeктор[j].x2)
            {
                если(вeктор[j].глубина + один > максимальная_глубина)
                {
                    вeктор[i].глубина = максимальная_глубина = вeктор[j].глубина + один;
                    вeктор[i].отец = &вeктор[j];
                    если(максимальная_глубина > максимум)
                    {
                        максимум = максимальная_глубина;
                        большой = &вeктор[i];
                    }
                }
            }
            j+=один;
        }
        i+=один;
    }
    вывод << максимум << "\n";
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⡿⢿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠋⠉⣭⣉⣁⣤⠀⠆⠀⣀⠐⠠⢄⣈⡙⢻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠋⠀⠔⣒⣥⣶⣶⣦⣴⣾⣿⣿⣿⣿⣧⢶⢕⠟⡹⢢⣻⢿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣡⡊⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣧⣷⣿⣵⣿⣬⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⡿⢡⣾⢣⠄⣿⣿⣿⣿⡿⠛⠋⠉⠉⠉⠀⠀⠈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣅⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣵⣻⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⠿⣿⣿⣿⣿⣿⣿⣮⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠟⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⡟⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣄⣀⣀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣟⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣾⢿⡿⡻⢭⣉⡉⠑⠂⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⡿⢷⠀⢀⣰⣶⣿⣿⣿⣶⡄⠀⠀⠀⠉⣤⣿⣷⣀⣀⣀⠊⠂⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣷⣿⠀⢩⡿⢋⢩⣭⣽⣿⡇⠀⠀⠀⠀⠸⣿⣿⣿⣿⠛⠛⠛⠂⠀⠀⠀⠀⠈⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣵⣾⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠈⠁⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⠿⠙⠞⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⠀⠐⠁⠐⠛⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠃⣠⣀⠈⢸⣿⣿⣿⣻⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⢀⣷⣶⣦⡶⢶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠆⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿
// ⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠉⠛⠛⠙⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⠟⠛
// ⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⣤⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⣠⣾⣿⠿⢟⠛⠏⠉⠀⠀⠀
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢠⣴⠟⠛⠛⣛⣛⣉⡩⠛⠛⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣟⣿⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⢐⡏⣵⣿⣿⣿⡿⠿⠿⠿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⣾⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣴⣾⣿⣿⣿⠟⠉⠀⠀⠀⠀⠂⠀⠐⠀⠀⠀⠀
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣮⣿⣿⡆⣀⣴⣶⣤⣤⣦⣄⣀⣀⣤⣤⣶⣶⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠅⠀⠀⠀⠀⠁⠀⠀⠀⠀⣀⣀⣤⣴⣴⣶
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠋⠉⠁⠀⠀
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⡀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠤⠀⠀⠀⠀⠀⠀⠐⠡⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// Этой мой портрет
    отрезок* выводящая_штука = большой;
    пока(выводящая_штука)
    {
        вывод << выводящая_штука->n <<" ";
        выводящая_штука=выводящая_штука->отец;
    }

    вернуть ноль;
}
